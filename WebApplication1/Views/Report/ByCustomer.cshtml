@{
    ViewData["Title"] = "Report by Customer";
    string from = Context.Request.Query["from"];
    string to = Context.Request.Query["to"];
    if (string.IsNullOrEmpty(from)) from = DateTime.Today.AddDays(-30).ToString("yyyy-MM-dd");
    if (string.IsNullOrEmpty(to)) to = DateTime.Today.ToString("yyyy-MM-dd");
}

<h3 class="mb-2">Report by Customer</h3>
<form class="row g-2 mb-3" method="get">
    <div class="col-auto"><input class="form-control" type="date" name="from" value="@from" /></div>
    <div class="col-auto"><input class="form-control" type="date" name="to" value="@to" /></div>
    <div class="col-auto"><button class="btn btn-primary">Apply</button></div>
</form>

<div class="row g-3">
    <div class="col-lg-7">
        <table class="table table-dark table-sm align-middle" id="tbl">
            <thead>
                <tr>
                    <th>Customer</th>
                    <th class="text-end">Orders</th>
                    <th class="text-end">Qty</th>
                    <th class="text-end">Revenue</th>
                </tr>
            </thead>
            <tbody></tbody>
            <tfoot><tr class="fw-bold"><td>Total</td><td class="text-end" id="tOrders">0</td><td class="text-end" id="tQty">0</td><td class="text-end" id="tRev">$0</td></tr></tfoot>
        </table>
    </div>
    <div class="col-lg-5"><canvas id="chart"></canvas></div>
</div>

@section Scripts {
    <script>
        (async function(){
          const from = new URLSearchParams(location.search).get('from') ?? '@from';
          const to   = new URLSearchParams(location.search).get('to')   ?? '@to';
          const url  = `/Reports/ByCustomer?from=${from}&to=${to}`;
          const res  = await fetch(url);
          const data = await res.json(); // [{customer, orders, quantity, revenue}, ...]

          // fill table
          const tb = document.querySelector('#tbl tbody');
          tb.innerHTML = '';
          let tO=0,tQ=0,tR=0;
          for (const r of data){
            tO+=r.orders; tQ+=r.quantity; tR+=r.revenue;
            tb.insertAdjacentHTML('beforeend',
              `<tr><td>${r.customer}</td>
                   <td class="text-end">${r.orders}</td>
                   <td class="text-end">${r.quantity}</td>
                   <td class="text-end">$${r.revenue.toFixed(2)}</td></tr>`);
          }
          document.getElementById('tOrders').textContent = tO;
          document.getElementById('tQty').textContent    = tQ;
          document.getElementById('tRev').textContent    = '$'+tR.toFixed(2);

          // chart (top 10 by revenue)
          const top = data.slice(0, 10);
          new Chart(document.getElementById('chart'), {
            type: 'bar',
            data: { labels: top.map(x=>x.customer),
                    datasets: [{ label: 'Revenue', data: top.map(x=>x.revenue) }] },
            options: { responsive:true, plugins:{ legend:{display:false} }, scales:{ y:{ beginAtZero:true } } }
          });
        })();
    </script>
}
